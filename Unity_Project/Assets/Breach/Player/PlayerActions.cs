//------------------------------------------------------------------------------
// <auto-generated>
//     This code was auto-generated by com.unity.inputsystem:InputActionCodeGenerator
//     version 1.3.0
//     from Assets/Breach/Player/PlayerActions.inputactions
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using UnityEngine.InputSystem;
using UnityEngine.InputSystem.Utilities;

namespace Breach.WildWaters.Player
{
    public partial class @PlayerActions : IInputActionCollection2, IDisposable
    {
        public InputActionAsset asset { get; }
        public @PlayerActions()
        {
            asset = InputActionAsset.FromJson(@"{
    ""name"": ""PlayerActions"",
    ""maps"": [
        {
            ""name"": ""SimulationControls"",
            ""id"": ""e9a61de6-834a-4d93-8729-ff5a93d6d4c7"",
            ""actions"": [
                {
                    ""name"": ""PlaySimulation"",
                    ""type"": ""Button"",
                    ""id"": ""a4411e8b-f378-4b03-a673-1504912f554a"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""PauseSimulation"",
                    ""type"": ""Button"",
                    ""id"": ""ac54d924-c50f-4dcf-8fde-bd282eb4e941"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""StopSimulation"",
                    ""type"": ""Button"",
                    ""id"": ""c4697e2a-21aa-4bb3-ba46-1a3bb70a5a55"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""d79ff7a7-3615-4d34-8bfe-91e924652c2d"",
                    ""path"": ""<Keyboard>/1"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""PlaySimulation"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""883d89b9-9dc0-475c-b48e-94f7532fac18"",
                    ""path"": ""<Keyboard>/2"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""PauseSimulation"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""6a7bf39c-1952-45e2-9d24-9e30b08658e4"",
                    ""path"": ""<Keyboard>/3"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""StopSimulation"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        },
        {
            ""name"": ""EditorMovement"",
            ""id"": ""1061eaed-56cf-4e12-ae4a-137abd7d57b6"",
            ""actions"": [
                {
                    ""name"": ""MoveForward"",
                    ""type"": ""Button"",
                    ""id"": ""381aafb5-6fbd-4941-ba81-810f3aaa9994"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""MoveRight"",
                    ""type"": ""Button"",
                    ""id"": ""be5e6f88-bf18-4773-a1eb-57ea403c8f11"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""MoveUp"",
                    ""type"": ""Button"",
                    ""id"": ""4527c4cc-5d64-45a8-95a7-fadbdeaef445"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Rotation"",
                    ""type"": ""Value"",
                    ""id"": ""1ca75a7c-c6af-4771-a833-3ebe770fd538"",
                    ""expectedControlType"": ""Vector2"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""SpeedBoost"",
                    ""type"": ""Button"",
                    ""id"": ""8854421e-dd9e-4030-a882-c92b689ac64d"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""EnableRotation"",
                    ""type"": ""Button"",
                    ""id"": ""a8737de1-6b3e-44a8-8352-f7c9a3c82ee0"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": ""1D Axis"",
                    ""id"": ""d4142d36-6ab5-41e7-ac34-7dc7421e6fed"",
                    ""path"": ""1DAxis"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""MoveForward"",
                    ""isComposite"": true,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""negative"",
                    ""id"": ""9b22275c-ec25-44da-9ff8-3829084307ea"",
                    ""path"": ""<Keyboard>/s"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""MoveForward"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""positive"",
                    ""id"": ""ae3004b2-e32b-4464-9efc-53e7936f037a"",
                    ""path"": ""<Keyboard>/w"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""MoveForward"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""1D Axis"",
                    ""id"": ""065d3a60-ce51-4537-8159-d1d5d4a02167"",
                    ""path"": ""1DAxis"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""MoveRight"",
                    ""isComposite"": true,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""negative"",
                    ""id"": ""36cad02c-89cf-4fae-8182-3b3105e606d6"",
                    ""path"": ""<Keyboard>/a"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""MoveRight"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""positive"",
                    ""id"": ""cb41884a-d459-4b97-b45a-6ce9d2a534b8"",
                    ""path"": ""<Keyboard>/d"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""MoveRight"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""1D Axis"",
                    ""id"": ""0cf55b35-9758-4e03-a35b-a811f271b6ad"",
                    ""path"": ""1DAxis"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""MoveUp"",
                    ""isComposite"": true,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""negative"",
                    ""id"": ""6a32a559-c685-4ca7-b686-64e0f7b84f60"",
                    ""path"": ""<Keyboard>/leftCtrl"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""MoveUp"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""positive"",
                    ""id"": ""0c3cd730-5d50-401f-9b7b-85a61bc14a3f"",
                    ""path"": ""<Keyboard>/space"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""MoveUp"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": """",
                    ""id"": ""890bc081-811c-4032-97e7-407ab8a422aa"",
                    ""path"": ""<Mouse>/position"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Rotation"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""843cf62f-cbff-42ff-8797-a0c9dda6b3aa"",
                    ""path"": ""<Keyboard>/leftShift"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""SpeedBoost"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""7d3ffc90-8e1e-4840-922d-5c7cf0705051"",
                    ""path"": ""<Mouse>/leftButton"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""EnableRotation"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        },
        {
            ""name"": ""PlayerUIControls"",
            ""id"": ""c853b97c-b431-4002-b756-4c251daa4cb8"",
            ""actions"": [
                {
                    ""name"": ""ToggleSimulationUI"",
                    ""type"": ""Button"",
                    ""id"": ""00d3626e-065c-4e70-8421-7de94e00c966"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""c121e278-d96e-4e89-a502-1a3c111149a8"",
                    ""path"": ""<Keyboard>/tab"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""ToggleSimulationUI"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""227d726b-ff88-4f30-af74-b727d09202a2"",
                    ""path"": ""<XRController>{LeftHand}/start"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""ToggleSimulationUI"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        }
    ],
    ""controlSchemes"": []
}");
            // SimulationControls
            m_SimulationControls = asset.FindActionMap("SimulationControls", throwIfNotFound: true);
            m_SimulationControls_PlaySimulation = m_SimulationControls.FindAction("PlaySimulation", throwIfNotFound: true);
            m_SimulationControls_PauseSimulation = m_SimulationControls.FindAction("PauseSimulation", throwIfNotFound: true);
            m_SimulationControls_StopSimulation = m_SimulationControls.FindAction("StopSimulation", throwIfNotFound: true);
            // EditorMovement
            m_EditorMovement = asset.FindActionMap("EditorMovement", throwIfNotFound: true);
            m_EditorMovement_MoveForward = m_EditorMovement.FindAction("MoveForward", throwIfNotFound: true);
            m_EditorMovement_MoveRight = m_EditorMovement.FindAction("MoveRight", throwIfNotFound: true);
            m_EditorMovement_MoveUp = m_EditorMovement.FindAction("MoveUp", throwIfNotFound: true);
            m_EditorMovement_Rotation = m_EditorMovement.FindAction("Rotation", throwIfNotFound: true);
            m_EditorMovement_SpeedBoost = m_EditorMovement.FindAction("SpeedBoost", throwIfNotFound: true);
            m_EditorMovement_EnableRotation = m_EditorMovement.FindAction("EnableRotation", throwIfNotFound: true);
            // PlayerUIControls
            m_PlayerUIControls = asset.FindActionMap("PlayerUIControls", throwIfNotFound: true);
            m_PlayerUIControls_ToggleSimulationUI = m_PlayerUIControls.FindAction("ToggleSimulationUI", throwIfNotFound: true);
        }

        public void Dispose()
        {
            UnityEngine.Object.Destroy(asset);
        }

        public InputBinding? bindingMask
        {
            get => asset.bindingMask;
            set => asset.bindingMask = value;
        }

        public ReadOnlyArray<InputDevice>? devices
        {
            get => asset.devices;
            set => asset.devices = value;
        }

        public ReadOnlyArray<InputControlScheme> controlSchemes => asset.controlSchemes;

        public bool Contains(InputAction action)
        {
            return asset.Contains(action);
        }

        public IEnumerator<InputAction> GetEnumerator()
        {
            return asset.GetEnumerator();
        }

        IEnumerator IEnumerable.GetEnumerator()
        {
            return GetEnumerator();
        }

        public void Enable()
        {
            asset.Enable();
        }

        public void Disable()
        {
            asset.Disable();
        }
        public IEnumerable<InputBinding> bindings => asset.bindings;

        public InputAction FindAction(string actionNameOrId, bool throwIfNotFound = false)
        {
            return asset.FindAction(actionNameOrId, throwIfNotFound);
        }
        public int FindBinding(InputBinding bindingMask, out InputAction action)
        {
            return asset.FindBinding(bindingMask, out action);
        }

        // SimulationControls
        private readonly InputActionMap m_SimulationControls;
        private ISimulationControlsActions m_SimulationControlsActionsCallbackInterface;
        private readonly InputAction m_SimulationControls_PlaySimulation;
        private readonly InputAction m_SimulationControls_PauseSimulation;
        private readonly InputAction m_SimulationControls_StopSimulation;
        public struct SimulationControlsActions
        {
            private @PlayerActions m_Wrapper;
            public SimulationControlsActions(@PlayerActions wrapper) { m_Wrapper = wrapper; }
            public InputAction @PlaySimulation => m_Wrapper.m_SimulationControls_PlaySimulation;
            public InputAction @PauseSimulation => m_Wrapper.m_SimulationControls_PauseSimulation;
            public InputAction @StopSimulation => m_Wrapper.m_SimulationControls_StopSimulation;
            public InputActionMap Get() { return m_Wrapper.m_SimulationControls; }
            public void Enable() { Get().Enable(); }
            public void Disable() { Get().Disable(); }
            public bool enabled => Get().enabled;
            public static implicit operator InputActionMap(SimulationControlsActions set) { return set.Get(); }
            public void SetCallbacks(ISimulationControlsActions instance)
            {
                if (m_Wrapper.m_SimulationControlsActionsCallbackInterface != null)
                {
                    @PlaySimulation.started -= m_Wrapper.m_SimulationControlsActionsCallbackInterface.OnPlaySimulation;
                    @PlaySimulation.performed -= m_Wrapper.m_SimulationControlsActionsCallbackInterface.OnPlaySimulation;
                    @PlaySimulation.canceled -= m_Wrapper.m_SimulationControlsActionsCallbackInterface.OnPlaySimulation;
                    @PauseSimulation.started -= m_Wrapper.m_SimulationControlsActionsCallbackInterface.OnPauseSimulation;
                    @PauseSimulation.performed -= m_Wrapper.m_SimulationControlsActionsCallbackInterface.OnPauseSimulation;
                    @PauseSimulation.canceled -= m_Wrapper.m_SimulationControlsActionsCallbackInterface.OnPauseSimulation;
                    @StopSimulation.started -= m_Wrapper.m_SimulationControlsActionsCallbackInterface.OnStopSimulation;
                    @StopSimulation.performed -= m_Wrapper.m_SimulationControlsActionsCallbackInterface.OnStopSimulation;
                    @StopSimulation.canceled -= m_Wrapper.m_SimulationControlsActionsCallbackInterface.OnStopSimulation;
                }
                m_Wrapper.m_SimulationControlsActionsCallbackInterface = instance;
                if (instance != null)
                {
                    @PlaySimulation.started += instance.OnPlaySimulation;
                    @PlaySimulation.performed += instance.OnPlaySimulation;
                    @PlaySimulation.canceled += instance.OnPlaySimulation;
                    @PauseSimulation.started += instance.OnPauseSimulation;
                    @PauseSimulation.performed += instance.OnPauseSimulation;
                    @PauseSimulation.canceled += instance.OnPauseSimulation;
                    @StopSimulation.started += instance.OnStopSimulation;
                    @StopSimulation.performed += instance.OnStopSimulation;
                    @StopSimulation.canceled += instance.OnStopSimulation;
                }
            }
        }
        public SimulationControlsActions @SimulationControls => new SimulationControlsActions(this);

        // EditorMovement
        private readonly InputActionMap m_EditorMovement;
        private IEditorMovementActions m_EditorMovementActionsCallbackInterface;
        private readonly InputAction m_EditorMovement_MoveForward;
        private readonly InputAction m_EditorMovement_MoveRight;
        private readonly InputAction m_EditorMovement_MoveUp;
        private readonly InputAction m_EditorMovement_Rotation;
        private readonly InputAction m_EditorMovement_SpeedBoost;
        private readonly InputAction m_EditorMovement_EnableRotation;
        public struct EditorMovementActions
        {
            private @PlayerActions m_Wrapper;
            public EditorMovementActions(@PlayerActions wrapper) { m_Wrapper = wrapper; }
            public InputAction @MoveForward => m_Wrapper.m_EditorMovement_MoveForward;
            public InputAction @MoveRight => m_Wrapper.m_EditorMovement_MoveRight;
            public InputAction @MoveUp => m_Wrapper.m_EditorMovement_MoveUp;
            public InputAction @Rotation => m_Wrapper.m_EditorMovement_Rotation;
            public InputAction @SpeedBoost => m_Wrapper.m_EditorMovement_SpeedBoost;
            public InputAction @EnableRotation => m_Wrapper.m_EditorMovement_EnableRotation;
            public InputActionMap Get() { return m_Wrapper.m_EditorMovement; }
            public void Enable() { Get().Enable(); }
            public void Disable() { Get().Disable(); }
            public bool enabled => Get().enabled;
            public static implicit operator InputActionMap(EditorMovementActions set) { return set.Get(); }
            public void SetCallbacks(IEditorMovementActions instance)
            {
                if (m_Wrapper.m_EditorMovementActionsCallbackInterface != null)
                {
                    @MoveForward.started -= m_Wrapper.m_EditorMovementActionsCallbackInterface.OnMoveForward;
                    @MoveForward.performed -= m_Wrapper.m_EditorMovementActionsCallbackInterface.OnMoveForward;
                    @MoveForward.canceled -= m_Wrapper.m_EditorMovementActionsCallbackInterface.OnMoveForward;
                    @MoveRight.started -= m_Wrapper.m_EditorMovementActionsCallbackInterface.OnMoveRight;
                    @MoveRight.performed -= m_Wrapper.m_EditorMovementActionsCallbackInterface.OnMoveRight;
                    @MoveRight.canceled -= m_Wrapper.m_EditorMovementActionsCallbackInterface.OnMoveRight;
                    @MoveUp.started -= m_Wrapper.m_EditorMovementActionsCallbackInterface.OnMoveUp;
                    @MoveUp.performed -= m_Wrapper.m_EditorMovementActionsCallbackInterface.OnMoveUp;
                    @MoveUp.canceled -= m_Wrapper.m_EditorMovementActionsCallbackInterface.OnMoveUp;
                    @Rotation.started -= m_Wrapper.m_EditorMovementActionsCallbackInterface.OnRotation;
                    @Rotation.performed -= m_Wrapper.m_EditorMovementActionsCallbackInterface.OnRotation;
                    @Rotation.canceled -= m_Wrapper.m_EditorMovementActionsCallbackInterface.OnRotation;
                    @SpeedBoost.started -= m_Wrapper.m_EditorMovementActionsCallbackInterface.OnSpeedBoost;
                    @SpeedBoost.performed -= m_Wrapper.m_EditorMovementActionsCallbackInterface.OnSpeedBoost;
                    @SpeedBoost.canceled -= m_Wrapper.m_EditorMovementActionsCallbackInterface.OnSpeedBoost;
                    @EnableRotation.started -= m_Wrapper.m_EditorMovementActionsCallbackInterface.OnEnableRotation;
                    @EnableRotation.performed -= m_Wrapper.m_EditorMovementActionsCallbackInterface.OnEnableRotation;
                    @EnableRotation.canceled -= m_Wrapper.m_EditorMovementActionsCallbackInterface.OnEnableRotation;
                }
                m_Wrapper.m_EditorMovementActionsCallbackInterface = instance;
                if (instance != null)
                {
                    @MoveForward.started += instance.OnMoveForward;
                    @MoveForward.performed += instance.OnMoveForward;
                    @MoveForward.canceled += instance.OnMoveForward;
                    @MoveRight.started += instance.OnMoveRight;
                    @MoveRight.performed += instance.OnMoveRight;
                    @MoveRight.canceled += instance.OnMoveRight;
                    @MoveUp.started += instance.OnMoveUp;
                    @MoveUp.performed += instance.OnMoveUp;
                    @MoveUp.canceled += instance.OnMoveUp;
                    @Rotation.started += instance.OnRotation;
                    @Rotation.performed += instance.OnRotation;
                    @Rotation.canceled += instance.OnRotation;
                    @SpeedBoost.started += instance.OnSpeedBoost;
                    @SpeedBoost.performed += instance.OnSpeedBoost;
                    @SpeedBoost.canceled += instance.OnSpeedBoost;
                    @EnableRotation.started += instance.OnEnableRotation;
                    @EnableRotation.performed += instance.OnEnableRotation;
                    @EnableRotation.canceled += instance.OnEnableRotation;
                }
            }
        }
        public EditorMovementActions @EditorMovement => new EditorMovementActions(this);

        // PlayerUIControls
        private readonly InputActionMap m_PlayerUIControls;
        private IPlayerUIControlsActions m_PlayerUIControlsActionsCallbackInterface;
        private readonly InputAction m_PlayerUIControls_ToggleSimulationUI;
        public struct PlayerUIControlsActions
        {
            private @PlayerActions m_Wrapper;
            public PlayerUIControlsActions(@PlayerActions wrapper) { m_Wrapper = wrapper; }
            public InputAction @ToggleSimulationUI => m_Wrapper.m_PlayerUIControls_ToggleSimulationUI;
            public InputActionMap Get() { return m_Wrapper.m_PlayerUIControls; }
            public void Enable() { Get().Enable(); }
            public void Disable() { Get().Disable(); }
            public bool enabled => Get().enabled;
            public static implicit operator InputActionMap(PlayerUIControlsActions set) { return set.Get(); }
            public void SetCallbacks(IPlayerUIControlsActions instance)
            {
                if (m_Wrapper.m_PlayerUIControlsActionsCallbackInterface != null)
                {
                    @ToggleSimulationUI.started -= m_Wrapper.m_PlayerUIControlsActionsCallbackInterface.OnToggleSimulationUI;
                    @ToggleSimulationUI.performed -= m_Wrapper.m_PlayerUIControlsActionsCallbackInterface.OnToggleSimulationUI;
                    @ToggleSimulationUI.canceled -= m_Wrapper.m_PlayerUIControlsActionsCallbackInterface.OnToggleSimulationUI;
                }
                m_Wrapper.m_PlayerUIControlsActionsCallbackInterface = instance;
                if (instance != null)
                {
                    @ToggleSimulationUI.started += instance.OnToggleSimulationUI;
                    @ToggleSimulationUI.performed += instance.OnToggleSimulationUI;
                    @ToggleSimulationUI.canceled += instance.OnToggleSimulationUI;
                }
            }
        }
        public PlayerUIControlsActions @PlayerUIControls => new PlayerUIControlsActions(this);
        public interface ISimulationControlsActions
        {
            void OnPlaySimulation(InputAction.CallbackContext context);
            void OnPauseSimulation(InputAction.CallbackContext context);
            void OnStopSimulation(InputAction.CallbackContext context);
        }
        public interface IEditorMovementActions
        {
            void OnMoveForward(InputAction.CallbackContext context);
            void OnMoveRight(InputAction.CallbackContext context);
            void OnMoveUp(InputAction.CallbackContext context);
            void OnRotation(InputAction.CallbackContext context);
            void OnSpeedBoost(InputAction.CallbackContext context);
            void OnEnableRotation(InputAction.CallbackContext context);
        }
        public interface IPlayerUIControlsActions
        {
            void OnToggleSimulationUI(InputAction.CallbackContext context);
        }
    }
}
